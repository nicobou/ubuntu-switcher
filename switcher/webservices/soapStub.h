/* soapStub.h
   Generated by gSOAP 2.8.4 from ./ctrl-webservice-definition.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_switcher__addResponse
#define SOAP_TYPE_switcher__addResponse (11)
/* switcher:addResponse */
struct switcher__addResponse
{
public:
	double *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_switcher__add
#define SOAP_TYPE_switcher__add (12)
/* switcher:add */
struct switcher__add
{
public:
	double a;	/* required element of type xsd:double */
	double b;	/* required element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_switcher__subResponse
#define SOAP_TYPE_switcher__subResponse (14)
/* switcher:subResponse */
struct switcher__subResponse
{
public:
	double *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_switcher__sub
#define SOAP_TYPE_switcher__sub (15)
/* switcher:sub */
struct switcher__sub
{
public:
	double a;	/* required element of type xsd:double */
	double b;	/* required element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_switcher__mulResponse
#define SOAP_TYPE_switcher__mulResponse (17)
/* switcher:mulResponse */
struct switcher__mulResponse
{
public:
	double *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_switcher__mul
#define SOAP_TYPE_switcher__mul (18)
/* switcher:mul */
struct switcher__mul
{
public:
	double a;	/* required element of type xsd:double */
	double b;	/* required element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_switcher__divResponse
#define SOAP_TYPE_switcher__divResponse (20)
/* switcher:divResponse */
struct switcher__divResponse
{
public:
	double *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_switcher__div
#define SOAP_TYPE_switcher__div (21)
/* switcher:div */
struct switcher__div
{
public:
	double a;	/* required element of type xsd:double */
	double b;	/* required element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_switcher__powResponse
#define SOAP_TYPE_switcher__powResponse (23)
/* switcher:powResponse */
struct switcher__powResponse
{
public:
	double *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_switcher__pow
#define SOAP_TYPE_switcher__pow (24)
/* switcher:pow */
struct switcher__pow
{
public:
	double a;	/* required element of type xsd:double */
	double b;	/* required element of type xsd:double */
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_switcher__get_factory_capabilitiesResponse
#define SOAP_TYPE_switcher__get_factory_capabilitiesResponse (29)
/* switcher:get-factory-capabilitiesResponse */
struct switcher__get_factory_capabilitiesResponse
{
public:
	std::vector<std::string >*result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_factory_capabilities
#define SOAP_TYPE_switcher__get_factory_capabilities (30)
/* switcher:get-factory-capabilities */
struct switcher__get_factory_capabilities
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_switcher__get_classes_docResponse
#define SOAP_TYPE_switcher__get_classes_docResponse (33)
/* switcher:get-classes-docResponse */
struct switcher__get_classes_docResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_classes_doc
#define SOAP_TYPE_switcher__get_classes_doc (34)
/* switcher:get-classes-doc */
struct switcher__get_classes_doc
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_switcher__get_quiddity_descriptionResponse
#define SOAP_TYPE_switcher__get_quiddity_descriptionResponse (36)
/* switcher:get-quiddity-descriptionResponse */
struct switcher__get_quiddity_descriptionResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_quiddity_description
#define SOAP_TYPE_switcher__get_quiddity_description (37)
/* switcher:get-quiddity-description */
struct switcher__get_quiddity_description
{
public:
	std::string quiddity_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_quiddities_descriptionResponse
#define SOAP_TYPE_switcher__get_quiddities_descriptionResponse (39)
/* switcher:get-quiddities-descriptionResponse */
struct switcher__get_quiddities_descriptionResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_quiddities_description
#define SOAP_TYPE_switcher__get_quiddities_description (40)
/* switcher:get-quiddities-description */
struct switcher__get_quiddities_description
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_switcher__get_class_docResponse
#define SOAP_TYPE_switcher__get_class_docResponse (42)
/* switcher:get-class-docResponse */
struct switcher__get_class_docResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_class_doc
#define SOAP_TYPE_switcher__get_class_doc (43)
/* switcher:get-class-doc */
struct switcher__get_class_doc
{
public:
	std::string class_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_quiddity_namesResponse
#define SOAP_TYPE_switcher__get_quiddity_namesResponse (45)
/* switcher:get-quiddity-namesResponse */
struct switcher__get_quiddity_namesResponse
{
public:
	std::vector<std::string >*result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_quiddity_names
#define SOAP_TYPE_switcher__get_quiddity_names (46)
/* switcher:get-quiddity-names */
struct switcher__get_quiddity_names
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_switcher__get_properties_descriptionResponse
#define SOAP_TYPE_switcher__get_properties_descriptionResponse (48)
/* switcher:get-properties-descriptionResponse */
struct switcher__get_properties_descriptionResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_properties_description
#define SOAP_TYPE_switcher__get_properties_description (49)
/* switcher:get-properties-description */
struct switcher__get_properties_description
{
public:
	std::string quiddity_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_property_descriptionResponse
#define SOAP_TYPE_switcher__get_property_descriptionResponse (51)
/* switcher:get-property-descriptionResponse */
struct switcher__get_property_descriptionResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_property_description
#define SOAP_TYPE_switcher__get_property_description (52)
/* switcher:get-property-description */
struct switcher__get_property_description
{
public:
	std::string quiddity_name;	/* required element of type xsd:string */
	std::string property_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_properties_description_by_classResponse
#define SOAP_TYPE_switcher__get_properties_description_by_classResponse (54)
/* switcher:get-properties-description-by-classResponse */
struct switcher__get_properties_description_by_classResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_properties_description_by_class
#define SOAP_TYPE_switcher__get_properties_description_by_class (55)
/* switcher:get-properties-description-by-class */
struct switcher__get_properties_description_by_class
{
public:
	std::string class_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_property_description_by_classResponse
#define SOAP_TYPE_switcher__get_property_description_by_classResponse (57)
/* switcher:get-property-description-by-classResponse */
struct switcher__get_property_description_by_classResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_property_description_by_class
#define SOAP_TYPE_switcher__get_property_description_by_class (58)
/* switcher:get-property-description-by-class */
struct switcher__get_property_description_by_class
{
public:
	std::string class_name;	/* required element of type xsd:string */
	std::string property_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__set_property
#define SOAP_TYPE_switcher__set_property (61)
/* switcher:set-property */
struct switcher__set_property
{
public:
	std::string quiddity_name;	/* required element of type xsd:string */
	std::string property_name;	/* required element of type xsd:string */
	std::string property_value;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_propertyResponse
#define SOAP_TYPE_switcher__get_propertyResponse (63)
/* switcher:get-propertyResponse */
struct switcher__get_propertyResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_property
#define SOAP_TYPE_switcher__get_property (64)
/* switcher:get-property */
struct switcher__get_property
{
public:
	std::string quiddity_name;	/* required element of type xsd:string */
	std::string property_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__create_quiddityResponse
#define SOAP_TYPE_switcher__create_quiddityResponse (66)
/* switcher:create-quiddityResponse */
struct switcher__create_quiddityResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__create_quiddity
#define SOAP_TYPE_switcher__create_quiddity (67)
/* switcher:create-quiddity */
struct switcher__create_quiddity
{
public:
	std::string quiddity_class;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__create_named_quiddityResponse
#define SOAP_TYPE_switcher__create_named_quiddityResponse (69)
/* switcher:create-named-quiddityResponse */
struct switcher__create_named_quiddityResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__create_named_quiddity
#define SOAP_TYPE_switcher__create_named_quiddity (70)
/* switcher:create-named-quiddity */
struct switcher__create_named_quiddity
{
public:
	std::string quiddity_class;	/* required element of type xsd:string */
	std::string nick_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__delete_quiddity
#define SOAP_TYPE_switcher__delete_quiddity (72)
/* switcher:delete-quiddity */
struct switcher__delete_quiddity
{
public:
	std::string quiddity_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_methods_descriptionResponse
#define SOAP_TYPE_switcher__get_methods_descriptionResponse (74)
/* switcher:get-methods-descriptionResponse */
struct switcher__get_methods_descriptionResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_methods_description
#define SOAP_TYPE_switcher__get_methods_description (75)
/* switcher:get-methods-description */
struct switcher__get_methods_description
{
public:
	std::string quiddity_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_method_descriptionResponse
#define SOAP_TYPE_switcher__get_method_descriptionResponse (77)
/* switcher:get-method-descriptionResponse */
struct switcher__get_method_descriptionResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_method_description
#define SOAP_TYPE_switcher__get_method_description (78)
/* switcher:get-method-description */
struct switcher__get_method_description
{
public:
	std::string quiddity_name;	/* required element of type xsd:string */
	std::string method_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_methods_description_by_classResponse
#define SOAP_TYPE_switcher__get_methods_description_by_classResponse (80)
/* switcher:get-methods-description-by-classResponse */
struct switcher__get_methods_description_by_classResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_methods_description_by_class
#define SOAP_TYPE_switcher__get_methods_description_by_class (81)
/* switcher:get-methods-description-by-class */
struct switcher__get_methods_description_by_class
{
public:
	std::string class_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_method_description_by_classResponse
#define SOAP_TYPE_switcher__get_method_description_by_classResponse (83)
/* switcher:get-method-description-by-classResponse */
struct switcher__get_method_description_by_classResponse
{
public:
	std::string *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__get_method_description_by_class
#define SOAP_TYPE_switcher__get_method_description_by_class (84)
/* switcher:get-method-description-by-class */
struct switcher__get_method_description_by_class
{
public:
	std::string class_name;	/* required element of type xsd:string */
	std::string method_name;	/* required element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_switcher__invoke_methodResponse
#define SOAP_TYPE_switcher__invoke_methodResponse (88)
/* switcher:invoke-methodResponse */
struct switcher__invoke_methodResponse
{
public:
	bool *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:boolean */
};
#endif

#ifndef SOAP_TYPE_switcher__invoke_method
#define SOAP_TYPE_switcher__invoke_method (89)
/* switcher:invoke-method */
struct switcher__invoke_method
{
public:
	std::string quiddity_name;	/* required element of type xsd:string */
	std::string method_name;	/* required element of type xsd:string */
	std::vector<std::string >args;	/* required element of type xsd:string */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (90)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (91)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (93)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (95)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (96)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
