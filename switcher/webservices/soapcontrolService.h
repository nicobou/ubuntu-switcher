/* soapcontrolService.h
   Generated by gSOAP 2.8.4 from ./ctrl-webservice-definition.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapcontrolService_H
#define soapcontrolService_H
#include "soapH.h"
class SOAP_CMAC controlService : public soap
{ public:
	/// Constructor
	controlService();
	/// Constructor with copy of another engine state
	controlService(const struct soap&);
	/// Constructor with engine input+output mode control
	controlService(soap_mode iomode);
	/// Constructor with engine input and output mode control
	controlService(soap_mode imode, soap_mode omode);
	/// Destructor, also frees all deserialized data
	virtual ~controlService();
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Initializer used by constructor
	virtual	void controlService_init(soap_mode imode, soap_mode omode);
	/// Create a copy
	virtual	controlService *copy() SOAP_PURE_VIRTUAL;
	/// Close connection (normally automatic)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Return sender-related fault to sender
	virtual	int soap_senderfault(const char *string, const char *detailXML);
	/// Return sender-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Return receiver-related fault to sender
	virtual	int soap_receiverfault(const char *string, const char *detailXML);
	/// Return receiver-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Run simple single-thread iterative service on port until a connection error occurs (returns error code or SOAP_OK), use this->bind_flag = SO_REUSEADDR to rebind for a rerun
	virtual	int run(int port);
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog);
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept();
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve();
	/// Used by serve() to dispatch a request (returns error code or SOAP_OK)
	virtual	int dispatch();

	///
	/// Service operations (you should define these):
	/// Note: compile with -DWITH_PURE_VIRTUAL for pure virtual methods
	///

	/// Web service operation 'add' (returns error code or SOAP_OK)
	virtual	int add(double a, double b, double *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'sub' (returns error code or SOAP_OK)
	virtual	int sub(double a, double b, double *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'mul' (returns error code or SOAP_OK)
	virtual	int mul(double a, double b, double *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'div' (returns error code or SOAP_OK)
	virtual	int div(double a, double b, double *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'pow' (returns error code or SOAP_OK)
	virtual	int pow(double a, double b, double *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-factory-capabilities' (returns error code or SOAP_OK)
	virtual	int get_factory_capabilities(std::vector<std::string >*result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-classes-doc' (returns error code or SOAP_OK)
	virtual	int get_classes_doc(std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-quiddity-description' (returns error code or SOAP_OK)
	virtual	int get_quiddity_description(std::string quiddity_name, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-quiddities-description' (returns error code or SOAP_OK)
	virtual	int get_quiddities_description(std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-class-doc' (returns error code or SOAP_OK)
	virtual	int get_class_doc(std::string class_name, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-quiddity-names' (returns error code or SOAP_OK)
	virtual	int get_quiddity_names(std::vector<std::string >*result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-properties-description' (returns error code or SOAP_OK)
	virtual	int get_properties_description(std::string quiddity_name, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-property-description' (returns error code or SOAP_OK)
	virtual	int get_property_description(std::string quiddity_name, std::string property_name, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-properties-description-by-class' (returns error code or SOAP_OK)
	virtual	int get_properties_description_by_class(std::string class_name, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-property-description-by-class' (returns error code or SOAP_OK)
	virtual	int get_property_description_by_class(std::string class_name, std::string property_name, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service one-way operation 'set-property' (return error code, SOAP_OK (no response), or send_set-property_empty_response())
	virtual	int set_property(std::string quiddity_name, std::string property_name, std::string property_value) SOAP_PURE_VIRTUAL;
	virtual	int send_set_property_empty_response(int httpcode) { return soap_send_empty_response(this, httpcode); }

	/// Web service operation 'get-property' (returns error code or SOAP_OK)
	virtual	int get_property(std::string quiddity_name, std::string property_name, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'create-quiddity' (returns error code or SOAP_OK)
	virtual	int create_quiddity(std::string quiddity_class, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'create-named-quiddity' (returns error code or SOAP_OK)
	virtual	int create_named_quiddity(std::string quiddity_class, std::string nick_name, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service one-way operation 'delete-quiddity' (return error code, SOAP_OK (no response), or send_delete-quiddity_empty_response())
	virtual	int delete_quiddity(std::string quiddity_name) SOAP_PURE_VIRTUAL;
	virtual	int send_delete_quiddity_empty_response(int httpcode) { return soap_send_empty_response(this, httpcode); }

	/// Web service operation 'get-methods-description' (returns error code or SOAP_OK)
	virtual	int get_methods_description(std::string quiddity_name, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-method-description' (returns error code or SOAP_OK)
	virtual	int get_method_description(std::string quiddity_name, std::string method_name, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-methods-description-by-class' (returns error code or SOAP_OK)
	virtual	int get_methods_description_by_class(std::string class_name, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'get-method-description-by-class' (returns error code or SOAP_OK)
	virtual	int get_method_description_by_class(std::string class_name, std::string method_name, std::string *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'invoke-method' (returns error code or SOAP_OK)
	virtual	int invoke_method(std::string quiddity_name, std::string method_name, std::vector<std::string >args, bool *result) SOAP_PURE_VIRTUAL;
};
#endif
