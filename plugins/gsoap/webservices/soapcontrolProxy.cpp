/* soapcontrolProxy.cpp
   Generated by gSOAP 2.8.4 from ./ctrl-webservice-definition.h

Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapcontrolProxy.h"

controlProxy::controlProxy()
{	controlProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

controlProxy::controlProxy(const struct soap &_soap) : soap(_soap)
{ }

controlProxy::controlProxy(const char *url)
{	controlProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

controlProxy::controlProxy(soap_mode iomode)
{	controlProxy_init(iomode, iomode);
}

controlProxy::controlProxy(const char *url, soap_mode iomode)
{	controlProxy_init(iomode, iomode);
	soap_endpoint = url;
}

controlProxy::controlProxy(soap_mode imode, soap_mode omode)
{	controlProxy_init(imode, omode);
}

controlProxy::~controlProxy()
{ }

void controlProxy::controlProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"switcher", "urn:control", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void controlProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void controlProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *controlProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *controlProxy::soap_fault()
{	return this->fault;
}

const char *controlProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *controlProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int controlProxy::soap_close_socket()
{	return soap_closesock(this);
}

int controlProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void controlProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void controlProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *controlProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int controlProxy::get_factory_capabilities(const char *endpoint, const char *soap_action, std::vector<std::string >*result)
{	struct soap *soap = this;
	struct switcher__get_factory_capabilities soap_tmp_switcher__get_factory_capabilities;
	struct switcher__get_factory_capabilitiesResponse *soap_tmp_switcher__get_factory_capabilitiesResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_factory_capabilities(soap, &soap_tmp_switcher__get_factory_capabilities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_factory_capabilities(soap, &soap_tmp_switcher__get_factory_capabilities, "switcher:get-factory-capabilities", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_factory_capabilities(soap, &soap_tmp_switcher__get_factory_capabilities, "switcher:get-factory-capabilities", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__vectorTemplateOfstd__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_factory_capabilitiesResponse = soap_get_switcher__get_factory_capabilitiesResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_factory_capabilitiesResponse->result)
		*result = *soap_tmp_switcher__get_factory_capabilitiesResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_classes_doc(const char *endpoint, const char *soap_action, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_classes_doc soap_tmp_switcher__get_classes_doc;
	struct switcher__get_classes_docResponse *soap_tmp_switcher__get_classes_docResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_classes_doc(soap, &soap_tmp_switcher__get_classes_doc);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_classes_doc(soap, &soap_tmp_switcher__get_classes_doc, "switcher:get-classes-doc", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_classes_doc(soap, &soap_tmp_switcher__get_classes_doc, "switcher:get-classes-doc", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_classes_docResponse = soap_get_switcher__get_classes_docResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_classes_docResponse->result)
		*result = *soap_tmp_switcher__get_classes_docResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_quiddity_description(const char *endpoint, const char *soap_action, std::string quiddity_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_quiddity_description soap_tmp_switcher__get_quiddity_description;
	struct switcher__get_quiddity_descriptionResponse *soap_tmp_switcher__get_quiddity_descriptionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_quiddity_description.quiddity_name = quiddity_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_quiddity_description(soap, &soap_tmp_switcher__get_quiddity_description);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_quiddity_description(soap, &soap_tmp_switcher__get_quiddity_description, "switcher:get-quiddity-description", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_quiddity_description(soap, &soap_tmp_switcher__get_quiddity_description, "switcher:get-quiddity-description", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_quiddity_descriptionResponse = soap_get_switcher__get_quiddity_descriptionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_quiddity_descriptionResponse->result)
		*result = *soap_tmp_switcher__get_quiddity_descriptionResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_quiddities_description(const char *endpoint, const char *soap_action, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_quiddities_description soap_tmp_switcher__get_quiddities_description;
	struct switcher__get_quiddities_descriptionResponse *soap_tmp_switcher__get_quiddities_descriptionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_quiddities_description(soap, &soap_tmp_switcher__get_quiddities_description);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_quiddities_description(soap, &soap_tmp_switcher__get_quiddities_description, "switcher:get-quiddities-description", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_quiddities_description(soap, &soap_tmp_switcher__get_quiddities_description, "switcher:get-quiddities-description", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_quiddities_descriptionResponse = soap_get_switcher__get_quiddities_descriptionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_quiddities_descriptionResponse->result)
		*result = *soap_tmp_switcher__get_quiddities_descriptionResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_class_doc(const char *endpoint, const char *soap_action, std::string class_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_class_doc soap_tmp_switcher__get_class_doc;
	struct switcher__get_class_docResponse *soap_tmp_switcher__get_class_docResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_class_doc.class_name = class_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_class_doc(soap, &soap_tmp_switcher__get_class_doc);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_class_doc(soap, &soap_tmp_switcher__get_class_doc, "switcher:get-class-doc", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_class_doc(soap, &soap_tmp_switcher__get_class_doc, "switcher:get-class-doc", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_class_docResponse = soap_get_switcher__get_class_docResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_class_docResponse->result)
		*result = *soap_tmp_switcher__get_class_docResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_quiddity_names(const char *endpoint, const char *soap_action, std::vector<std::string >*result)
{	struct soap *soap = this;
	struct switcher__get_quiddity_names soap_tmp_switcher__get_quiddity_names;
	struct switcher__get_quiddity_namesResponse *soap_tmp_switcher__get_quiddity_namesResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_quiddity_names(soap, &soap_tmp_switcher__get_quiddity_names);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_quiddity_names(soap, &soap_tmp_switcher__get_quiddity_names, "switcher:get-quiddity-names", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_quiddity_names(soap, &soap_tmp_switcher__get_quiddity_names, "switcher:get-quiddity-names", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__vectorTemplateOfstd__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_quiddity_namesResponse = soap_get_switcher__get_quiddity_namesResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_quiddity_namesResponse->result)
		*result = *soap_tmp_switcher__get_quiddity_namesResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_properties_description(const char *endpoint, const char *soap_action, std::string quiddity_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_properties_description soap_tmp_switcher__get_properties_description;
	struct switcher__get_properties_descriptionResponse *soap_tmp_switcher__get_properties_descriptionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_properties_description.quiddity_name = quiddity_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_properties_description(soap, &soap_tmp_switcher__get_properties_description);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_properties_description(soap, &soap_tmp_switcher__get_properties_description, "switcher:get-properties-description", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_properties_description(soap, &soap_tmp_switcher__get_properties_description, "switcher:get-properties-description", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_properties_descriptionResponse = soap_get_switcher__get_properties_descriptionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_properties_descriptionResponse->result)
		*result = *soap_tmp_switcher__get_properties_descriptionResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_property_description(const char *endpoint, const char *soap_action, std::string quiddity_name, std::string property_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_property_description soap_tmp_switcher__get_property_description;
	struct switcher__get_property_descriptionResponse *soap_tmp_switcher__get_property_descriptionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_property_description.quiddity_name = quiddity_name;
	soap_tmp_switcher__get_property_description.property_name = property_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_property_description(soap, &soap_tmp_switcher__get_property_description);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_property_description(soap, &soap_tmp_switcher__get_property_description, "switcher:get-property-description", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_property_description(soap, &soap_tmp_switcher__get_property_description, "switcher:get-property-description", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_property_descriptionResponse = soap_get_switcher__get_property_descriptionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_property_descriptionResponse->result)
		*result = *soap_tmp_switcher__get_property_descriptionResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_properties_description_by_class(const char *endpoint, const char *soap_action, std::string class_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_properties_description_by_class soap_tmp_switcher__get_properties_description_by_class;
	struct switcher__get_properties_description_by_classResponse *soap_tmp_switcher__get_properties_description_by_classResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_properties_description_by_class.class_name = class_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_properties_description_by_class(soap, &soap_tmp_switcher__get_properties_description_by_class);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_properties_description_by_class(soap, &soap_tmp_switcher__get_properties_description_by_class, "switcher:get-properties-description-by-class", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_properties_description_by_class(soap, &soap_tmp_switcher__get_properties_description_by_class, "switcher:get-properties-description-by-class", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_properties_description_by_classResponse = soap_get_switcher__get_properties_description_by_classResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_properties_description_by_classResponse->result)
		*result = *soap_tmp_switcher__get_properties_description_by_classResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_property_description_by_class(const char *endpoint, const char *soap_action, std::string class_name, std::string property_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_property_description_by_class soap_tmp_switcher__get_property_description_by_class;
	struct switcher__get_property_description_by_classResponse *soap_tmp_switcher__get_property_description_by_classResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_property_description_by_class.class_name = class_name;
	soap_tmp_switcher__get_property_description_by_class.property_name = property_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_property_description_by_class(soap, &soap_tmp_switcher__get_property_description_by_class);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_property_description_by_class(soap, &soap_tmp_switcher__get_property_description_by_class, "switcher:get-property-description-by-class", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_property_description_by_class(soap, &soap_tmp_switcher__get_property_description_by_class, "switcher:get-property-description-by-class", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_property_description_by_classResponse = soap_get_switcher__get_property_description_by_classResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_property_description_by_classResponse->result)
		*result = *soap_tmp_switcher__get_property_description_by_classResponse->result;
	return soap_closesock(soap);
}

int controlProxy::send_set_property(const char *endpoint, const char *soap_action, std::string quiddity_name, std::string property_name, std::string property_value)
{	struct soap *soap = this;
	struct switcher__set_property soap_tmp_switcher__set_property;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__set_property.quiddity_name = quiddity_name;
	soap_tmp_switcher__set_property.property_name = property_name;
	soap_tmp_switcher__set_property.property_value = property_value;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__set_property(soap, &soap_tmp_switcher__set_property);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__set_property(soap, &soap_tmp_switcher__set_property, "switcher:set-property", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__set_property(soap, &soap_tmp_switcher__set_property, "switcher:set-property", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int controlProxy::recv_set_property(struct switcher__set_property& tmp)
{	struct soap *soap = this;

	struct switcher__set_property *_param_1 = &tmp;
	soap_default_switcher__set_property(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_switcher__set_property(soap, _param_1, "switcher:set-property", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int controlProxy::get_property(const char *endpoint, const char *soap_action, std::string quiddity_name, std::string property_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_property soap_tmp_switcher__get_property;
	struct switcher__get_propertyResponse *soap_tmp_switcher__get_propertyResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_property.quiddity_name = quiddity_name;
	soap_tmp_switcher__get_property.property_name = property_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_property(soap, &soap_tmp_switcher__get_property);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_property(soap, &soap_tmp_switcher__get_property, "switcher:get-property", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_property(soap, &soap_tmp_switcher__get_property, "switcher:get-property", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_propertyResponse = soap_get_switcher__get_propertyResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_propertyResponse->result)
		*result = *soap_tmp_switcher__get_propertyResponse->result;
	return soap_closesock(soap);
}

int controlProxy::create_quiddity(const char *endpoint, const char *soap_action, std::string quiddity_class, std::string *result)
{	struct soap *soap = this;
	struct switcher__create_quiddity soap_tmp_switcher__create_quiddity;
	struct switcher__create_quiddityResponse *soap_tmp_switcher__create_quiddityResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__create_quiddity.quiddity_class = quiddity_class;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__create_quiddity(soap, &soap_tmp_switcher__create_quiddity);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__create_quiddity(soap, &soap_tmp_switcher__create_quiddity, "switcher:create-quiddity", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__create_quiddity(soap, &soap_tmp_switcher__create_quiddity, "switcher:create-quiddity", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__create_quiddityResponse = soap_get_switcher__create_quiddityResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__create_quiddityResponse->result)
		*result = *soap_tmp_switcher__create_quiddityResponse->result;
	return soap_closesock(soap);
}

int controlProxy::create_named_quiddity(const char *endpoint, const char *soap_action, std::string quiddity_class, std::string nick_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__create_named_quiddity soap_tmp_switcher__create_named_quiddity;
	struct switcher__create_named_quiddityResponse *soap_tmp_switcher__create_named_quiddityResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__create_named_quiddity.quiddity_class = quiddity_class;
	soap_tmp_switcher__create_named_quiddity.nick_name = nick_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__create_named_quiddity(soap, &soap_tmp_switcher__create_named_quiddity);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__create_named_quiddity(soap, &soap_tmp_switcher__create_named_quiddity, "switcher:create-named-quiddity", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__create_named_quiddity(soap, &soap_tmp_switcher__create_named_quiddity, "switcher:create-named-quiddity", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__create_named_quiddityResponse = soap_get_switcher__create_named_quiddityResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__create_named_quiddityResponse->result)
		*result = *soap_tmp_switcher__create_named_quiddityResponse->result;
	return soap_closesock(soap);
}

int controlProxy::rename_quiddity(const char *endpoint, const char *soap_action, std::string nick_name, std::string new_nick_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__rename_quiddity soap_tmp_switcher__rename_quiddity;
	struct switcher__rename_quiddityResponse *soap_tmp_switcher__rename_quiddityResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__rename_quiddity.nick_name = nick_name;
	soap_tmp_switcher__rename_quiddity.new_nick_name = new_nick_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__rename_quiddity(soap, &soap_tmp_switcher__rename_quiddity);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__rename_quiddity(soap, &soap_tmp_switcher__rename_quiddity, "switcher:rename-quiddity", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__rename_quiddity(soap, &soap_tmp_switcher__rename_quiddity, "switcher:rename-quiddity", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__rename_quiddityResponse = soap_get_switcher__rename_quiddityResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__rename_quiddityResponse->result)
		*result = *soap_tmp_switcher__rename_quiddityResponse->result;
	return soap_closesock(soap);
}

int controlProxy::send_delete_quiddity(const char *endpoint, const char *soap_action, std::string quiddity_name)
{	struct soap *soap = this;
	struct switcher__delete_quiddity soap_tmp_switcher__delete_quiddity;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__delete_quiddity.quiddity_name = quiddity_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__delete_quiddity(soap, &soap_tmp_switcher__delete_quiddity);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__delete_quiddity(soap, &soap_tmp_switcher__delete_quiddity, "switcher:delete-quiddity", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__delete_quiddity(soap, &soap_tmp_switcher__delete_quiddity, "switcher:delete-quiddity", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int controlProxy::recv_delete_quiddity(struct switcher__delete_quiddity& tmp)
{	struct soap *soap = this;

	struct switcher__delete_quiddity *_param_2 = &tmp;
	soap_default_switcher__delete_quiddity(soap, _param_2);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_switcher__delete_quiddity(soap, _param_2, "switcher:delete-quiddity", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int controlProxy::get_methods_description(const char *endpoint, const char *soap_action, std::string quiddity_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_methods_description soap_tmp_switcher__get_methods_description;
	struct switcher__get_methods_descriptionResponse *soap_tmp_switcher__get_methods_descriptionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_methods_description.quiddity_name = quiddity_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_methods_description(soap, &soap_tmp_switcher__get_methods_description);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_methods_description(soap, &soap_tmp_switcher__get_methods_description, "switcher:get-methods-description", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_methods_description(soap, &soap_tmp_switcher__get_methods_description, "switcher:get-methods-description", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_methods_descriptionResponse = soap_get_switcher__get_methods_descriptionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_methods_descriptionResponse->result)
		*result = *soap_tmp_switcher__get_methods_descriptionResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_method_description(const char *endpoint, const char *soap_action, std::string quiddity_name, std::string method_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_method_description soap_tmp_switcher__get_method_description;
	struct switcher__get_method_descriptionResponse *soap_tmp_switcher__get_method_descriptionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_method_description.quiddity_name = quiddity_name;
	soap_tmp_switcher__get_method_description.method_name = method_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_method_description(soap, &soap_tmp_switcher__get_method_description);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_method_description(soap, &soap_tmp_switcher__get_method_description, "switcher:get-method-description", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_method_description(soap, &soap_tmp_switcher__get_method_description, "switcher:get-method-description", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_method_descriptionResponse = soap_get_switcher__get_method_descriptionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_method_descriptionResponse->result)
		*result = *soap_tmp_switcher__get_method_descriptionResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_methods_description_by_class(const char *endpoint, const char *soap_action, std::string class_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_methods_description_by_class soap_tmp_switcher__get_methods_description_by_class;
	struct switcher__get_methods_description_by_classResponse *soap_tmp_switcher__get_methods_description_by_classResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_methods_description_by_class.class_name = class_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_methods_description_by_class(soap, &soap_tmp_switcher__get_methods_description_by_class);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_methods_description_by_class(soap, &soap_tmp_switcher__get_methods_description_by_class, "switcher:get-methods-description-by-class", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_methods_description_by_class(soap, &soap_tmp_switcher__get_methods_description_by_class, "switcher:get-methods-description-by-class", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_methods_description_by_classResponse = soap_get_switcher__get_methods_description_by_classResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_methods_description_by_classResponse->result)
		*result = *soap_tmp_switcher__get_methods_description_by_classResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_method_description_by_class(const char *endpoint, const char *soap_action, std::string class_name, std::string method_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_method_description_by_class soap_tmp_switcher__get_method_description_by_class;
	struct switcher__get_method_description_by_classResponse *soap_tmp_switcher__get_method_description_by_classResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_method_description_by_class.class_name = class_name;
	soap_tmp_switcher__get_method_description_by_class.method_name = method_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_method_description_by_class(soap, &soap_tmp_switcher__get_method_description_by_class);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_method_description_by_class(soap, &soap_tmp_switcher__get_method_description_by_class, "switcher:get-method-description-by-class", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_method_description_by_class(soap, &soap_tmp_switcher__get_method_description_by_class, "switcher:get-method-description-by-class", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_method_description_by_classResponse = soap_get_switcher__get_method_description_by_classResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_method_description_by_classResponse->result)
		*result = *soap_tmp_switcher__get_method_description_by_classResponse->result;
	return soap_closesock(soap);
}

int controlProxy::invoke_method(const char *endpoint, const char *soap_action, std::string quiddity_name, std::string method_name, std::vector<std::string >args, std::string *result)
{	struct soap *soap = this;
	struct switcher__invoke_method soap_tmp_switcher__invoke_method;
	struct switcher__invoke_methodResponse *soap_tmp_switcher__invoke_methodResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__invoke_method.quiddity_name = quiddity_name;
	soap_tmp_switcher__invoke_method.method_name = method_name;
	soap_tmp_switcher__invoke_method.args = args;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__invoke_method(soap, &soap_tmp_switcher__invoke_method);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__invoke_method(soap, &soap_tmp_switcher__invoke_method, "switcher:invoke-method", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__invoke_method(soap, &soap_tmp_switcher__invoke_method, "switcher:invoke-method", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__invoke_methodResponse = soap_get_switcher__invoke_methodResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__invoke_methodResponse->result)
		*result = *soap_tmp_switcher__invoke_methodResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_signals_description(const char *endpoint, const char *soap_action, std::string quiddity_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_signals_description soap_tmp_switcher__get_signals_description;
	struct switcher__get_signals_descriptionResponse *soap_tmp_switcher__get_signals_descriptionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_signals_description.quiddity_name = quiddity_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_signals_description(soap, &soap_tmp_switcher__get_signals_description);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_signals_description(soap, &soap_tmp_switcher__get_signals_description, "switcher:get-signals-description", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_signals_description(soap, &soap_tmp_switcher__get_signals_description, "switcher:get-signals-description", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_signals_descriptionResponse = soap_get_switcher__get_signals_descriptionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_signals_descriptionResponse->result)
		*result = *soap_tmp_switcher__get_signals_descriptionResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_signal_description(const char *endpoint, const char *soap_action, std::string quiddity_name, std::string signal_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_signal_description soap_tmp_switcher__get_signal_description;
	struct switcher__get_signal_descriptionResponse *soap_tmp_switcher__get_signal_descriptionResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_signal_description.quiddity_name = quiddity_name;
	soap_tmp_switcher__get_signal_description.signal_name = signal_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_signal_description(soap, &soap_tmp_switcher__get_signal_description);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_signal_description(soap, &soap_tmp_switcher__get_signal_description, "switcher:get-signal-description", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_signal_description(soap, &soap_tmp_switcher__get_signal_description, "switcher:get-signal-description", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_signal_descriptionResponse = soap_get_switcher__get_signal_descriptionResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_signal_descriptionResponse->result)
		*result = *soap_tmp_switcher__get_signal_descriptionResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_signals_description_by_class(const char *endpoint, const char *soap_action, std::string class_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_signals_description_by_class soap_tmp_switcher__get_signals_description_by_class;
	struct switcher__get_signals_description_by_classResponse *soap_tmp_switcher__get_signals_description_by_classResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_signals_description_by_class.class_name = class_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_signals_description_by_class(soap, &soap_tmp_switcher__get_signals_description_by_class);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_signals_description_by_class(soap, &soap_tmp_switcher__get_signals_description_by_class, "switcher:get-signals-description-by-class", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_signals_description_by_class(soap, &soap_tmp_switcher__get_signals_description_by_class, "switcher:get-signals-description-by-class", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_signals_description_by_classResponse = soap_get_switcher__get_signals_description_by_classResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_signals_description_by_classResponse->result)
		*result = *soap_tmp_switcher__get_signals_description_by_classResponse->result;
	return soap_closesock(soap);
}

int controlProxy::save(const char *endpoint, const char *soap_action, std::string file_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__save soap_tmp_switcher__save;
	struct switcher__saveResponse *soap_tmp_switcher__saveResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__save.file_name = file_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__save(soap, &soap_tmp_switcher__save);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__save(soap, &soap_tmp_switcher__save, "switcher:save", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__save(soap, &soap_tmp_switcher__save, "switcher:save", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__saveResponse = soap_get_switcher__saveResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__saveResponse->result)
		*result = *soap_tmp_switcher__saveResponse->result;
	return soap_closesock(soap);
}

int controlProxy::load(const char *endpoint, const char *soap_action, std::string file_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__load soap_tmp_switcher__load;
	struct switcher__loadResponse *soap_tmp_switcher__loadResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__load.file_name = file_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__load(soap, &soap_tmp_switcher__load);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__load(soap, &soap_tmp_switcher__load, "switcher:load", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__load(soap, &soap_tmp_switcher__load, "switcher:load", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__loadResponse = soap_get_switcher__loadResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__loadResponse->result)
		*result = *soap_tmp_switcher__loadResponse->result;
	return soap_closesock(soap);
}

int controlProxy::run(const char *endpoint, const char *soap_action, std::string file_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__run soap_tmp_switcher__run;
	struct switcher__runResponse *soap_tmp_switcher__runResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__run.file_name = file_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__run(soap, &soap_tmp_switcher__run);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__run(soap, &soap_tmp_switcher__run, "switcher:run", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__run(soap, &soap_tmp_switcher__run, "switcher:run", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__runResponse = soap_get_switcher__runResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__runResponse->result)
		*result = *soap_tmp_switcher__runResponse->result;
	return soap_closesock(soap);
}

int controlProxy::get_signal_description_by_class(const char *endpoint, const char *soap_action, std::string class_name, std::string signal_name, std::string *result)
{	struct soap *soap = this;
	struct switcher__get_signal_description_by_class soap_tmp_switcher__get_signal_description_by_class;
	struct switcher__get_signal_description_by_classResponse *soap_tmp_switcher__get_signal_description_by_classResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8080/switcher-control.cgi";
	soap->encodingStyle = "";
	soap_tmp_switcher__get_signal_description_by_class.class_name = class_name;
	soap_tmp_switcher__get_signal_description_by_class.signal_name = signal_name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_switcher__get_signal_description_by_class(soap, &soap_tmp_switcher__get_signal_description_by_class);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_signal_description_by_class(soap, &soap_tmp_switcher__get_signal_description_by_class, "switcher:get-signal-description-by-class", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_signal_description_by_class(soap, &soap_tmp_switcher__get_signal_description_by_class, "switcher:get-signal-description-by-class", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__string(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_switcher__get_signal_description_by_classResponse = soap_get_switcher__get_signal_description_by_classResponse(soap, NULL, "", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_switcher__get_signal_description_by_classResponse->result)
		*result = *soap_tmp_switcher__get_signal_description_by_classResponse->result;
	return soap_closesock(soap);
}
/* End of client proxy code */
