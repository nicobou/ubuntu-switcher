/* soapcontrolService.cpp
   Generated by gSOAP 2.8.16 from ./ctrl-webservice-definition.hpp

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapcontrolService.h"

controlService::controlService()
{	controlService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

controlService::controlService(const struct soap &_soap) : soap(_soap)
{ }

controlService::controlService(soap_mode iomode)
{	controlService_init(iomode, iomode);
}

controlService::controlService(soap_mode imode, soap_mode omode)
{	controlService_init(imode, omode);
}

controlService::~controlService()
{ }

void controlService::controlService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"switcher", "urn:control", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
};

void controlService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void controlService::reset()
{	destroy();
	soap_done(this);
	soap_initialize(this);
	controlService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
controlService *controlService::copy()
{	controlService *dup = SOAP_NEW_COPY(controlService(*(struct soap*)this));
	return dup;
}
#endif

int controlService::soap_close_socket()
{	return soap_closesock(this);
}

int controlService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int controlService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int controlService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int controlService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int controlService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void controlService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void controlService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *controlService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void controlService::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *controlService::soap_header()
{	return this->header;
}

int controlService::run(int port)
{	if (soap_valid_socket(this->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->error;
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET controlService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET controlService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int controlService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif

int controlService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_switcher__get_factory_capabilities(controlService*);
static int serve_switcher__get_classes_doc(controlService*);
static int serve_switcher__get_quiddity_description(controlService*);
static int serve_switcher__get_quiddities_description(controlService*);
static int serve_switcher__get_class_doc(controlService*);
static int serve_switcher__get_quiddity_names(controlService*);
static int serve_switcher__get_properties_description(controlService*);
static int serve_switcher__get_property_description(controlService*);
static int serve_switcher__get_properties_description_by_class(controlService*);
static int serve_switcher__get_property_description_by_class(controlService*);
static int serve_switcher__set_property(controlService*);
static int serve_switcher__get_property(controlService*);
static int serve_switcher__create_quiddity(controlService*);
static int serve_switcher__create_named_quiddity(controlService*);
static int serve_switcher__delete_quiddity(controlService*);
static int serve_switcher__get_methods_description(controlService*);
static int serve_switcher__get_method_description(controlService*);
static int serve_switcher__get_methods_description_by_class(controlService*);
static int serve_switcher__get_method_description_by_class(controlService*);
static int serve_switcher__invoke_method(controlService*);
static int serve_switcher__get_signals_description(controlService*);
static int serve_switcher__get_signal_description(controlService*);
static int serve_switcher__get_signals_description_by_class(controlService*);
static int serve_switcher__save(controlService*);
static int serve_switcher__load(controlService*);
static int serve_switcher__run(controlService*);
static int serve_switcher__get_signal_description_by_class(controlService*);
static int serve_switcher__get_information_tree(controlService*);

int controlService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-factory-capabilities"))
		return serve_switcher__get_factory_capabilities(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-classes-doc"))
		return serve_switcher__get_classes_doc(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-quiddity-description"))
		return serve_switcher__get_quiddity_description(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-quiddities-description"))
		return serve_switcher__get_quiddities_description(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-class-doc"))
		return serve_switcher__get_class_doc(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-quiddity-names"))
		return serve_switcher__get_quiddity_names(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-properties-description"))
		return serve_switcher__get_properties_description(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-property-description"))
		return serve_switcher__get_property_description(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-properties-description-by-class"))
		return serve_switcher__get_properties_description_by_class(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-property-description-by-class"))
		return serve_switcher__get_property_description_by_class(this);
	if (!soap_match_tag(this, this->tag, "switcher:set-property"))
		return serve_switcher__set_property(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-property"))
		return serve_switcher__get_property(this);
	if (!soap_match_tag(this, this->tag, "switcher:create-quiddity"))
		return serve_switcher__create_quiddity(this);
	if (!soap_match_tag(this, this->tag, "switcher:create-named-quiddity"))
		return serve_switcher__create_named_quiddity(this);
	if (!soap_match_tag(this, this->tag, "switcher:delete-quiddity"))
		return serve_switcher__delete_quiddity(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-methods-description"))
		return serve_switcher__get_methods_description(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-method-description"))
		return serve_switcher__get_method_description(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-methods-description-by-class"))
		return serve_switcher__get_methods_description_by_class(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-method-description-by-class"))
		return serve_switcher__get_method_description_by_class(this);
	if (!soap_match_tag(this, this->tag, "switcher:invoke-method"))
		return serve_switcher__invoke_method(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-signals-description"))
		return serve_switcher__get_signals_description(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-signal-description"))
		return serve_switcher__get_signal_description(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-signals-description-by-class"))
		return serve_switcher__get_signals_description_by_class(this);
	if (!soap_match_tag(this, this->tag, "switcher:save"))
		return serve_switcher__save(this);
	if (!soap_match_tag(this, this->tag, "switcher:load"))
		return serve_switcher__load(this);
	if (!soap_match_tag(this, this->tag, "switcher:run"))
		return serve_switcher__run(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-signal-description-by-class"))
		return serve_switcher__get_signal_description_by_class(this);
	if (!soap_match_tag(this, this->tag, "switcher:get-information-tree"))
		return serve_switcher__get_information_tree(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_switcher__get_factory_capabilities(controlService *soap)
{	struct switcher__get_factory_capabilities soap_tmp_switcher__get_factory_capabilities;
	struct switcher__get_factory_capabilitiesResponse soap_tmp_switcher__get_factory_capabilitiesResponse;
	std::vector<std::string > soap_tmp_std__vectorTemplateOfstd__string;
	soap_default_switcher__get_factory_capabilitiesResponse(soap, &soap_tmp_switcher__get_factory_capabilitiesResponse);
	soap_default_std__vectorTemplateOfstd__string(soap, &soap_tmp_std__vectorTemplateOfstd__string);
	soap_tmp_switcher__get_factory_capabilitiesResponse.result = &soap_tmp_std__vectorTemplateOfstd__string;
	soap_default_switcher__get_factory_capabilities(soap, &soap_tmp_switcher__get_factory_capabilities);
	if (!soap_get_switcher__get_factory_capabilities(soap, &soap_tmp_switcher__get_factory_capabilities, "switcher:get-factory-capabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_factory_capabilities(soap_tmp_switcher__get_factory_capabilitiesResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_factory_capabilitiesResponse(soap, &soap_tmp_switcher__get_factory_capabilitiesResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_factory_capabilitiesResponse(soap, &soap_tmp_switcher__get_factory_capabilitiesResponse, "switcher:get-factory-capabilitiesResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_factory_capabilitiesResponse(soap, &soap_tmp_switcher__get_factory_capabilitiesResponse, "switcher:get-factory-capabilitiesResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_classes_doc(controlService *soap)
{	struct switcher__get_classes_doc soap_tmp_switcher__get_classes_doc;
	struct switcher__get_classes_docResponse soap_tmp_switcher__get_classes_docResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_classes_docResponse(soap, &soap_tmp_switcher__get_classes_docResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_classes_docResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_classes_doc(soap, &soap_tmp_switcher__get_classes_doc);
	if (!soap_get_switcher__get_classes_doc(soap, &soap_tmp_switcher__get_classes_doc, "switcher:get-classes-doc", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_classes_doc(soap_tmp_switcher__get_classes_docResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_classes_docResponse(soap, &soap_tmp_switcher__get_classes_docResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_classes_docResponse(soap, &soap_tmp_switcher__get_classes_docResponse, "switcher:get-classes-docResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_classes_docResponse(soap, &soap_tmp_switcher__get_classes_docResponse, "switcher:get-classes-docResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_quiddity_description(controlService *soap)
{	struct switcher__get_quiddity_description soap_tmp_switcher__get_quiddity_description;
	struct switcher__get_quiddity_descriptionResponse soap_tmp_switcher__get_quiddity_descriptionResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_quiddity_descriptionResponse(soap, &soap_tmp_switcher__get_quiddity_descriptionResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_quiddity_descriptionResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_quiddity_description(soap, &soap_tmp_switcher__get_quiddity_description);
	if (!soap_get_switcher__get_quiddity_description(soap, &soap_tmp_switcher__get_quiddity_description, "switcher:get-quiddity-description", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_quiddity_description(soap_tmp_switcher__get_quiddity_description.quiddity_name, soap_tmp_switcher__get_quiddity_descriptionResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_quiddity_descriptionResponse(soap, &soap_tmp_switcher__get_quiddity_descriptionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_quiddity_descriptionResponse(soap, &soap_tmp_switcher__get_quiddity_descriptionResponse, "switcher:get-quiddity-descriptionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_quiddity_descriptionResponse(soap, &soap_tmp_switcher__get_quiddity_descriptionResponse, "switcher:get-quiddity-descriptionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_quiddities_description(controlService *soap)
{	struct switcher__get_quiddities_description soap_tmp_switcher__get_quiddities_description;
	struct switcher__get_quiddities_descriptionResponse soap_tmp_switcher__get_quiddities_descriptionResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_quiddities_descriptionResponse(soap, &soap_tmp_switcher__get_quiddities_descriptionResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_quiddities_descriptionResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_quiddities_description(soap, &soap_tmp_switcher__get_quiddities_description);
	if (!soap_get_switcher__get_quiddities_description(soap, &soap_tmp_switcher__get_quiddities_description, "switcher:get-quiddities-description", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_quiddities_description(soap_tmp_switcher__get_quiddities_descriptionResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_quiddities_descriptionResponse(soap, &soap_tmp_switcher__get_quiddities_descriptionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_quiddities_descriptionResponse(soap, &soap_tmp_switcher__get_quiddities_descriptionResponse, "switcher:get-quiddities-descriptionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_quiddities_descriptionResponse(soap, &soap_tmp_switcher__get_quiddities_descriptionResponse, "switcher:get-quiddities-descriptionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_class_doc(controlService *soap)
{	struct switcher__get_class_doc soap_tmp_switcher__get_class_doc;
	struct switcher__get_class_docResponse soap_tmp_switcher__get_class_docResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_class_docResponse(soap, &soap_tmp_switcher__get_class_docResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_class_docResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_class_doc(soap, &soap_tmp_switcher__get_class_doc);
	if (!soap_get_switcher__get_class_doc(soap, &soap_tmp_switcher__get_class_doc, "switcher:get-class-doc", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_class_doc(soap_tmp_switcher__get_class_doc.class_name, soap_tmp_switcher__get_class_docResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_class_docResponse(soap, &soap_tmp_switcher__get_class_docResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_class_docResponse(soap, &soap_tmp_switcher__get_class_docResponse, "switcher:get-class-docResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_class_docResponse(soap, &soap_tmp_switcher__get_class_docResponse, "switcher:get-class-docResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_quiddity_names(controlService *soap)
{	struct switcher__get_quiddity_names soap_tmp_switcher__get_quiddity_names;
	struct switcher__get_quiddity_namesResponse soap_tmp_switcher__get_quiddity_namesResponse;
	std::vector<std::string > soap_tmp_std__vectorTemplateOfstd__string;
	soap_default_switcher__get_quiddity_namesResponse(soap, &soap_tmp_switcher__get_quiddity_namesResponse);
	soap_default_std__vectorTemplateOfstd__string(soap, &soap_tmp_std__vectorTemplateOfstd__string);
	soap_tmp_switcher__get_quiddity_namesResponse.result = &soap_tmp_std__vectorTemplateOfstd__string;
	soap_default_switcher__get_quiddity_names(soap, &soap_tmp_switcher__get_quiddity_names);
	if (!soap_get_switcher__get_quiddity_names(soap, &soap_tmp_switcher__get_quiddity_names, "switcher:get-quiddity-names", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_quiddity_names(soap_tmp_switcher__get_quiddity_namesResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_quiddity_namesResponse(soap, &soap_tmp_switcher__get_quiddity_namesResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_quiddity_namesResponse(soap, &soap_tmp_switcher__get_quiddity_namesResponse, "switcher:get-quiddity-namesResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_quiddity_namesResponse(soap, &soap_tmp_switcher__get_quiddity_namesResponse, "switcher:get-quiddity-namesResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_properties_description(controlService *soap)
{	struct switcher__get_properties_description soap_tmp_switcher__get_properties_description;
	struct switcher__get_properties_descriptionResponse soap_tmp_switcher__get_properties_descriptionResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_properties_descriptionResponse(soap, &soap_tmp_switcher__get_properties_descriptionResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_properties_descriptionResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_properties_description(soap, &soap_tmp_switcher__get_properties_description);
	if (!soap_get_switcher__get_properties_description(soap, &soap_tmp_switcher__get_properties_description, "switcher:get-properties-description", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_properties_description(soap_tmp_switcher__get_properties_description.quiddity_name, soap_tmp_switcher__get_properties_descriptionResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_properties_descriptionResponse(soap, &soap_tmp_switcher__get_properties_descriptionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_properties_descriptionResponse(soap, &soap_tmp_switcher__get_properties_descriptionResponse, "switcher:get-properties-descriptionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_properties_descriptionResponse(soap, &soap_tmp_switcher__get_properties_descriptionResponse, "switcher:get-properties-descriptionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_property_description(controlService *soap)
{	struct switcher__get_property_description soap_tmp_switcher__get_property_description;
	struct switcher__get_property_descriptionResponse soap_tmp_switcher__get_property_descriptionResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_property_descriptionResponse(soap, &soap_tmp_switcher__get_property_descriptionResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_property_descriptionResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_property_description(soap, &soap_tmp_switcher__get_property_description);
	if (!soap_get_switcher__get_property_description(soap, &soap_tmp_switcher__get_property_description, "switcher:get-property-description", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_property_description(soap_tmp_switcher__get_property_description.quiddity_name, soap_tmp_switcher__get_property_description.property_name, soap_tmp_switcher__get_property_descriptionResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_property_descriptionResponse(soap, &soap_tmp_switcher__get_property_descriptionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_property_descriptionResponse(soap, &soap_tmp_switcher__get_property_descriptionResponse, "switcher:get-property-descriptionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_property_descriptionResponse(soap, &soap_tmp_switcher__get_property_descriptionResponse, "switcher:get-property-descriptionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_properties_description_by_class(controlService *soap)
{	struct switcher__get_properties_description_by_class soap_tmp_switcher__get_properties_description_by_class;
	struct switcher__get_properties_description_by_classResponse soap_tmp_switcher__get_properties_description_by_classResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_properties_description_by_classResponse(soap, &soap_tmp_switcher__get_properties_description_by_classResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_properties_description_by_classResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_properties_description_by_class(soap, &soap_tmp_switcher__get_properties_description_by_class);
	if (!soap_get_switcher__get_properties_description_by_class(soap, &soap_tmp_switcher__get_properties_description_by_class, "switcher:get-properties-description-by-class", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_properties_description_by_class(soap_tmp_switcher__get_properties_description_by_class.class_name, soap_tmp_switcher__get_properties_description_by_classResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_properties_description_by_classResponse(soap, &soap_tmp_switcher__get_properties_description_by_classResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_properties_description_by_classResponse(soap, &soap_tmp_switcher__get_properties_description_by_classResponse, "switcher:get-properties-description-by-classResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_properties_description_by_classResponse(soap, &soap_tmp_switcher__get_properties_description_by_classResponse, "switcher:get-properties-description-by-classResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_property_description_by_class(controlService *soap)
{	struct switcher__get_property_description_by_class soap_tmp_switcher__get_property_description_by_class;
	struct switcher__get_property_description_by_classResponse soap_tmp_switcher__get_property_description_by_classResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_property_description_by_classResponse(soap, &soap_tmp_switcher__get_property_description_by_classResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_property_description_by_classResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_property_description_by_class(soap, &soap_tmp_switcher__get_property_description_by_class);
	if (!soap_get_switcher__get_property_description_by_class(soap, &soap_tmp_switcher__get_property_description_by_class, "switcher:get-property-description-by-class", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_property_description_by_class(soap_tmp_switcher__get_property_description_by_class.class_name, soap_tmp_switcher__get_property_description_by_class.property_name, soap_tmp_switcher__get_property_description_by_classResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_property_description_by_classResponse(soap, &soap_tmp_switcher__get_property_description_by_classResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_property_description_by_classResponse(soap, &soap_tmp_switcher__get_property_description_by_classResponse, "switcher:get-property-description-by-classResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_property_description_by_classResponse(soap, &soap_tmp_switcher__get_property_description_by_classResponse, "switcher:get-property-description-by-classResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__set_property(controlService *soap)
{	struct switcher__set_property soap_tmp_switcher__set_property;
	soap_default_switcher__set_property(soap, &soap_tmp_switcher__set_property);
	if (!soap_get_switcher__set_property(soap, &soap_tmp_switcher__set_property, "switcher:set-property", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->set_property(soap_tmp_switcher__set_property.quiddity_name, soap_tmp_switcher__set_property.property_name, soap_tmp_switcher__set_property.property_value);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	return soap_closesock(soap);
}

static int serve_switcher__get_property(controlService *soap)
{	struct switcher__get_property soap_tmp_switcher__get_property;
	struct switcher__get_propertyResponse soap_tmp_switcher__get_propertyResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_propertyResponse(soap, &soap_tmp_switcher__get_propertyResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_propertyResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_property(soap, &soap_tmp_switcher__get_property);
	if (!soap_get_switcher__get_property(soap, &soap_tmp_switcher__get_property, "switcher:get-property", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_property(soap_tmp_switcher__get_property.quiddity_name, soap_tmp_switcher__get_property.property_name, soap_tmp_switcher__get_propertyResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_propertyResponse(soap, &soap_tmp_switcher__get_propertyResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_propertyResponse(soap, &soap_tmp_switcher__get_propertyResponse, "switcher:get-propertyResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_propertyResponse(soap, &soap_tmp_switcher__get_propertyResponse, "switcher:get-propertyResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__create_quiddity(controlService *soap)
{	struct switcher__create_quiddity soap_tmp_switcher__create_quiddity;
	struct switcher__create_quiddityResponse soap_tmp_switcher__create_quiddityResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__create_quiddityResponse(soap, &soap_tmp_switcher__create_quiddityResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__create_quiddityResponse.result = &soap_tmp_std__string;
	soap_default_switcher__create_quiddity(soap, &soap_tmp_switcher__create_quiddity);
	if (!soap_get_switcher__create_quiddity(soap, &soap_tmp_switcher__create_quiddity, "switcher:create-quiddity", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->create_quiddity(soap_tmp_switcher__create_quiddity.quiddity_class, soap_tmp_switcher__create_quiddityResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__create_quiddityResponse(soap, &soap_tmp_switcher__create_quiddityResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__create_quiddityResponse(soap, &soap_tmp_switcher__create_quiddityResponse, "switcher:create-quiddityResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__create_quiddityResponse(soap, &soap_tmp_switcher__create_quiddityResponse, "switcher:create-quiddityResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__create_named_quiddity(controlService *soap)
{	struct switcher__create_named_quiddity soap_tmp_switcher__create_named_quiddity;
	struct switcher__create_named_quiddityResponse soap_tmp_switcher__create_named_quiddityResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__create_named_quiddityResponse(soap, &soap_tmp_switcher__create_named_quiddityResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__create_named_quiddityResponse.result = &soap_tmp_std__string;
	soap_default_switcher__create_named_quiddity(soap, &soap_tmp_switcher__create_named_quiddity);
	if (!soap_get_switcher__create_named_quiddity(soap, &soap_tmp_switcher__create_named_quiddity, "switcher:create-named-quiddity", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->create_named_quiddity(soap_tmp_switcher__create_named_quiddity.quiddity_class, soap_tmp_switcher__create_named_quiddity.nick_name, soap_tmp_switcher__create_named_quiddityResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__create_named_quiddityResponse(soap, &soap_tmp_switcher__create_named_quiddityResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__create_named_quiddityResponse(soap, &soap_tmp_switcher__create_named_quiddityResponse, "switcher:create-named-quiddityResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__create_named_quiddityResponse(soap, &soap_tmp_switcher__create_named_quiddityResponse, "switcher:create-named-quiddityResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__delete_quiddity(controlService *soap)
{	struct switcher__delete_quiddity soap_tmp_switcher__delete_quiddity;
	soap_default_switcher__delete_quiddity(soap, &soap_tmp_switcher__delete_quiddity);
	if (!soap_get_switcher__delete_quiddity(soap, &soap_tmp_switcher__delete_quiddity, "switcher:delete-quiddity", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->delete_quiddity(soap_tmp_switcher__delete_quiddity.quiddity_name);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	return soap_closesock(soap);
}

static int serve_switcher__get_methods_description(controlService *soap)
{	struct switcher__get_methods_description soap_tmp_switcher__get_methods_description;
	struct switcher__get_methods_descriptionResponse soap_tmp_switcher__get_methods_descriptionResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_methods_descriptionResponse(soap, &soap_tmp_switcher__get_methods_descriptionResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_methods_descriptionResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_methods_description(soap, &soap_tmp_switcher__get_methods_description);
	if (!soap_get_switcher__get_methods_description(soap, &soap_tmp_switcher__get_methods_description, "switcher:get-methods-description", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_methods_description(soap_tmp_switcher__get_methods_description.quiddity_name, soap_tmp_switcher__get_methods_descriptionResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_methods_descriptionResponse(soap, &soap_tmp_switcher__get_methods_descriptionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_methods_descriptionResponse(soap, &soap_tmp_switcher__get_methods_descriptionResponse, "switcher:get-methods-descriptionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_methods_descriptionResponse(soap, &soap_tmp_switcher__get_methods_descriptionResponse, "switcher:get-methods-descriptionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_method_description(controlService *soap)
{	struct switcher__get_method_description soap_tmp_switcher__get_method_description;
	struct switcher__get_method_descriptionResponse soap_tmp_switcher__get_method_descriptionResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_method_descriptionResponse(soap, &soap_tmp_switcher__get_method_descriptionResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_method_descriptionResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_method_description(soap, &soap_tmp_switcher__get_method_description);
	if (!soap_get_switcher__get_method_description(soap, &soap_tmp_switcher__get_method_description, "switcher:get-method-description", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_method_description(soap_tmp_switcher__get_method_description.quiddity_name, soap_tmp_switcher__get_method_description.method_name, soap_tmp_switcher__get_method_descriptionResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_method_descriptionResponse(soap, &soap_tmp_switcher__get_method_descriptionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_method_descriptionResponse(soap, &soap_tmp_switcher__get_method_descriptionResponse, "switcher:get-method-descriptionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_method_descriptionResponse(soap, &soap_tmp_switcher__get_method_descriptionResponse, "switcher:get-method-descriptionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_methods_description_by_class(controlService *soap)
{	struct switcher__get_methods_description_by_class soap_tmp_switcher__get_methods_description_by_class;
	struct switcher__get_methods_description_by_classResponse soap_tmp_switcher__get_methods_description_by_classResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_methods_description_by_classResponse(soap, &soap_tmp_switcher__get_methods_description_by_classResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_methods_description_by_classResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_methods_description_by_class(soap, &soap_tmp_switcher__get_methods_description_by_class);
	if (!soap_get_switcher__get_methods_description_by_class(soap, &soap_tmp_switcher__get_methods_description_by_class, "switcher:get-methods-description-by-class", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_methods_description_by_class(soap_tmp_switcher__get_methods_description_by_class.class_name, soap_tmp_switcher__get_methods_description_by_classResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_methods_description_by_classResponse(soap, &soap_tmp_switcher__get_methods_description_by_classResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_methods_description_by_classResponse(soap, &soap_tmp_switcher__get_methods_description_by_classResponse, "switcher:get-methods-description-by-classResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_methods_description_by_classResponse(soap, &soap_tmp_switcher__get_methods_description_by_classResponse, "switcher:get-methods-description-by-classResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_method_description_by_class(controlService *soap)
{	struct switcher__get_method_description_by_class soap_tmp_switcher__get_method_description_by_class;
	struct switcher__get_method_description_by_classResponse soap_tmp_switcher__get_method_description_by_classResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_method_description_by_classResponse(soap, &soap_tmp_switcher__get_method_description_by_classResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_method_description_by_classResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_method_description_by_class(soap, &soap_tmp_switcher__get_method_description_by_class);
	if (!soap_get_switcher__get_method_description_by_class(soap, &soap_tmp_switcher__get_method_description_by_class, "switcher:get-method-description-by-class", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_method_description_by_class(soap_tmp_switcher__get_method_description_by_class.class_name, soap_tmp_switcher__get_method_description_by_class.method_name, soap_tmp_switcher__get_method_description_by_classResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_method_description_by_classResponse(soap, &soap_tmp_switcher__get_method_description_by_classResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_method_description_by_classResponse(soap, &soap_tmp_switcher__get_method_description_by_classResponse, "switcher:get-method-description-by-classResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_method_description_by_classResponse(soap, &soap_tmp_switcher__get_method_description_by_classResponse, "switcher:get-method-description-by-classResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__invoke_method(controlService *soap)
{	struct switcher__invoke_method soap_tmp_switcher__invoke_method;
	struct switcher__invoke_methodResponse soap_tmp_switcher__invoke_methodResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__invoke_methodResponse(soap, &soap_tmp_switcher__invoke_methodResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__invoke_methodResponse.result = &soap_tmp_std__string;
	soap_default_switcher__invoke_method(soap, &soap_tmp_switcher__invoke_method);
	if (!soap_get_switcher__invoke_method(soap, &soap_tmp_switcher__invoke_method, "switcher:invoke-method", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->invoke_method(soap_tmp_switcher__invoke_method.quiddity_name, soap_tmp_switcher__invoke_method.method_name, soap_tmp_switcher__invoke_method.args, soap_tmp_switcher__invoke_methodResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__invoke_methodResponse(soap, &soap_tmp_switcher__invoke_methodResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__invoke_methodResponse(soap, &soap_tmp_switcher__invoke_methodResponse, "switcher:invoke-methodResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__invoke_methodResponse(soap, &soap_tmp_switcher__invoke_methodResponse, "switcher:invoke-methodResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_signals_description(controlService *soap)
{	struct switcher__get_signals_description soap_tmp_switcher__get_signals_description;
	struct switcher__get_signals_descriptionResponse soap_tmp_switcher__get_signals_descriptionResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_signals_descriptionResponse(soap, &soap_tmp_switcher__get_signals_descriptionResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_signals_descriptionResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_signals_description(soap, &soap_tmp_switcher__get_signals_description);
	if (!soap_get_switcher__get_signals_description(soap, &soap_tmp_switcher__get_signals_description, "switcher:get-signals-description", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_signals_description(soap_tmp_switcher__get_signals_description.quiddity_name, soap_tmp_switcher__get_signals_descriptionResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_signals_descriptionResponse(soap, &soap_tmp_switcher__get_signals_descriptionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_signals_descriptionResponse(soap, &soap_tmp_switcher__get_signals_descriptionResponse, "switcher:get-signals-descriptionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_signals_descriptionResponse(soap, &soap_tmp_switcher__get_signals_descriptionResponse, "switcher:get-signals-descriptionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_signal_description(controlService *soap)
{	struct switcher__get_signal_description soap_tmp_switcher__get_signal_description;
	struct switcher__get_signal_descriptionResponse soap_tmp_switcher__get_signal_descriptionResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_signal_descriptionResponse(soap, &soap_tmp_switcher__get_signal_descriptionResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_signal_descriptionResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_signal_description(soap, &soap_tmp_switcher__get_signal_description);
	if (!soap_get_switcher__get_signal_description(soap, &soap_tmp_switcher__get_signal_description, "switcher:get-signal-description", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_signal_description(soap_tmp_switcher__get_signal_description.quiddity_name, soap_tmp_switcher__get_signal_description.signal_name, soap_tmp_switcher__get_signal_descriptionResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_signal_descriptionResponse(soap, &soap_tmp_switcher__get_signal_descriptionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_signal_descriptionResponse(soap, &soap_tmp_switcher__get_signal_descriptionResponse, "switcher:get-signal-descriptionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_signal_descriptionResponse(soap, &soap_tmp_switcher__get_signal_descriptionResponse, "switcher:get-signal-descriptionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_signals_description_by_class(controlService *soap)
{	struct switcher__get_signals_description_by_class soap_tmp_switcher__get_signals_description_by_class;
	struct switcher__get_signals_description_by_classResponse soap_tmp_switcher__get_signals_description_by_classResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_signals_description_by_classResponse(soap, &soap_tmp_switcher__get_signals_description_by_classResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_signals_description_by_classResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_signals_description_by_class(soap, &soap_tmp_switcher__get_signals_description_by_class);
	if (!soap_get_switcher__get_signals_description_by_class(soap, &soap_tmp_switcher__get_signals_description_by_class, "switcher:get-signals-description-by-class", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_signals_description_by_class(soap_tmp_switcher__get_signals_description_by_class.class_name, soap_tmp_switcher__get_signals_description_by_classResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_signals_description_by_classResponse(soap, &soap_tmp_switcher__get_signals_description_by_classResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_signals_description_by_classResponse(soap, &soap_tmp_switcher__get_signals_description_by_classResponse, "switcher:get-signals-description-by-classResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_signals_description_by_classResponse(soap, &soap_tmp_switcher__get_signals_description_by_classResponse, "switcher:get-signals-description-by-classResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__save(controlService *soap)
{	struct switcher__save soap_tmp_switcher__save;
	struct switcher__saveResponse soap_tmp_switcher__saveResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__saveResponse(soap, &soap_tmp_switcher__saveResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__saveResponse.result = &soap_tmp_std__string;
	soap_default_switcher__save(soap, &soap_tmp_switcher__save);
	if (!soap_get_switcher__save(soap, &soap_tmp_switcher__save, "switcher:save", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->save(soap_tmp_switcher__save.file_name, soap_tmp_switcher__saveResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__saveResponse(soap, &soap_tmp_switcher__saveResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__saveResponse(soap, &soap_tmp_switcher__saveResponse, "switcher:saveResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__saveResponse(soap, &soap_tmp_switcher__saveResponse, "switcher:saveResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__load(controlService *soap)
{	struct switcher__load soap_tmp_switcher__load;
	struct switcher__loadResponse soap_tmp_switcher__loadResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__loadResponse(soap, &soap_tmp_switcher__loadResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__loadResponse.result = &soap_tmp_std__string;
	soap_default_switcher__load(soap, &soap_tmp_switcher__load);
	if (!soap_get_switcher__load(soap, &soap_tmp_switcher__load, "switcher:load", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->load(soap_tmp_switcher__load.file_name, soap_tmp_switcher__loadResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__loadResponse(soap, &soap_tmp_switcher__loadResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__loadResponse(soap, &soap_tmp_switcher__loadResponse, "switcher:loadResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__loadResponse(soap, &soap_tmp_switcher__loadResponse, "switcher:loadResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__run(controlService *soap)
{	struct switcher__run soap_tmp_switcher__run;
	struct switcher__runResponse soap_tmp_switcher__runResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__runResponse(soap, &soap_tmp_switcher__runResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__runResponse.result = &soap_tmp_std__string;
	soap_default_switcher__run(soap, &soap_tmp_switcher__run);
	if (!soap_get_switcher__run(soap, &soap_tmp_switcher__run, "switcher:run", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->run(soap_tmp_switcher__run.file_name, soap_tmp_switcher__runResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__runResponse(soap, &soap_tmp_switcher__runResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__runResponse(soap, &soap_tmp_switcher__runResponse, "switcher:runResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__runResponse(soap, &soap_tmp_switcher__runResponse, "switcher:runResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_signal_description_by_class(controlService *soap)
{	struct switcher__get_signal_description_by_class soap_tmp_switcher__get_signal_description_by_class;
	struct switcher__get_signal_description_by_classResponse soap_tmp_switcher__get_signal_description_by_classResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_signal_description_by_classResponse(soap, &soap_tmp_switcher__get_signal_description_by_classResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_signal_description_by_classResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_signal_description_by_class(soap, &soap_tmp_switcher__get_signal_description_by_class);
	if (!soap_get_switcher__get_signal_description_by_class(soap, &soap_tmp_switcher__get_signal_description_by_class, "switcher:get-signal-description-by-class", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_signal_description_by_class(soap_tmp_switcher__get_signal_description_by_class.class_name, soap_tmp_switcher__get_signal_description_by_class.signal_name, soap_tmp_switcher__get_signal_description_by_classResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_signal_description_by_classResponse(soap, &soap_tmp_switcher__get_signal_description_by_classResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_signal_description_by_classResponse(soap, &soap_tmp_switcher__get_signal_description_by_classResponse, "switcher:get-signal-description-by-classResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_signal_description_by_classResponse(soap, &soap_tmp_switcher__get_signal_description_by_classResponse, "switcher:get-signal-description-by-classResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_switcher__get_information_tree(controlService *soap)
{	struct switcher__get_information_tree soap_tmp_switcher__get_information_tree;
	struct switcher__get_information_treeResponse soap_tmp_switcher__get_information_treeResponse;
	std::string soap_tmp_std__string;
	soap_default_switcher__get_information_treeResponse(soap, &soap_tmp_switcher__get_information_treeResponse);
	soap_default_std__string(soap, &soap_tmp_std__string);
	soap_tmp_switcher__get_information_treeResponse.result = &soap_tmp_std__string;
	soap_default_switcher__get_information_tree(soap, &soap_tmp_switcher__get_information_tree);
	if (!soap_get_switcher__get_information_tree(soap, &soap_tmp_switcher__get_information_tree, "switcher:get-information-tree", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->get_information_tree(soap_tmp_switcher__get_information_tree.quiddity_name, soap_tmp_switcher__get_information_tree.path, soap_tmp_switcher__get_information_treeResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_switcher__get_information_treeResponse(soap, &soap_tmp_switcher__get_information_treeResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_switcher__get_information_treeResponse(soap, &soap_tmp_switcher__get_information_treeResponse, "switcher:get-information-treeResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_switcher__get_information_treeResponse(soap, &soap_tmp_switcher__get_information_treeResponse, "switcher:get-information-treeResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
